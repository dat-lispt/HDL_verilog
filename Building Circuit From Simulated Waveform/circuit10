module top_module (
    input clk,
    input a,
    input b,
    output q,
    output state  );
	
    always @(posedge clk) begin
        if( a== 1 & b ==1 & state == 0) state = 1;    
        else if (a == 0 & b==0 & state==1) state = 0;
    end
    assign q = (a ^ b) ^ state;
endmodule

/* Looking at what cause q = 1: we have [a = 0, b =1, state = 0] or [a =1, b =0, state = 0]
[a=1, b=1, state = 1] or [a=0, b=0, state=1]

The pattern show that state = 1 want a = b and state = 0 want a != b.
In coding, the XOR indiicates this a and b relationship the best.
Knowing a = b is 0 with a ^b and state = 1. For q to equal 1, we need to use q ^(a^b)
when checking the same relationship with state = 0, it fits

unlike q, state update using flip-flop (i.e changes only on clock rise)
Before state = 1, the condition is [state = 0, a = 1, b =1] and that is all so we use it
Checking for the value before state transition to 0, [state= 1, a = 0, b =0]

  */
