module top_module(
    input d,
    input done_counting,
    input ack,
    input [9:0] state,    // 10-bit one-hot current state
    output B3_next,
    output S_next,
    output S1_next,
    output Count_next,
    output Wait_next,
    output done,
    output counting,
    output shift_ena
); //

    // You may use these parameters to access state bits using e.g., state[B2] instead of state[6].
    parameter S=0, S1=1, S11=2, S110=3, B0=4, B1=5, B2=6, B3=7, Count=8, Wait=9;
    reg [9:0] next_state = 9'b0;
    int i;

    always @* begin
        next_state = 10'b0;
        for (i =0; i < 10; i = i +1) begin
            if(state[i]) begin
            	case(i)
                	S: next_state = next_state | (d ? 1<<S1:1<<S);
                	S1: next_state = next_state | (d ? 1<<S11: 1<<S);
                	S11: next_state = next_state | (d ? 1<<S11: 1<<S110);
                	S110: next_state = next_state | (d ? 1<<B0 : 1<<S);
                	B0: next_state = next_state | (1 << B1);
                	B1: next_state= next_state | (1<<B2);
                	B2: next_state= next_state | ( 1<< B3);
                	B3: next_state = next_state | (1<< Count);
                	Count: next_state = next_state | (done_counting ? 1<<Wait: 1<<Count) ;
                	Wait: next_state = next_state | (ack ? 1<<S: 1<<Wait);
                	default: next_state = 9'b0;
            	endcase
            end
        end 
    end


    assign B3_next = next_state[7];
    assign S_next = next_state[0];
    assign S1_next = next_state[1];
    assign Count_next = next_state[8];
    assign Wait_next = next_state[9];
    assign done = state[9];
    assign counting = state[8];
    assign shift_ena = state[4] || state[5] || state[6] || state[7];

endmodule
