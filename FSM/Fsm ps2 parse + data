
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); //
	
    // FSM from fsm_ps2
	reg [1:0] state, next_state;
    reg[23:0] data_bytes;
    // State transition logic (combinational)
	always @* begin
        case(state)
            2'b00: next_state= (in[3]) ? 2'b01 : 2'b00;
            2'b01: next_state= 2'b10;
            2'b10: next_state= 2'b11;
            2'b11: next_state= (in[3]) ? 2'b01 : 2'b00;
        endcase
    end
    // State flip-flops (sequential)
    always @(posedge clk) begin
        if(reset)
            state = 2'b00;
        else
            state = next_state;
        data_bytes = {data_bytes,  in};
    end
    // Output logic
    assign done = (state == 2'b11);
    assign out_bytes = (state == 2'b11) ? data_bytes : 0;
    // New: Datapath to store incoming bytes.

endmodule
