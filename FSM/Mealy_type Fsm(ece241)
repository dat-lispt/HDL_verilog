module top_module (
    input clk,
    input aresetn,    // Asynchronous active-low reset
    input x,
    output z ); 

    parameter find_one = 2'b00, check_reset = 2'b01, out= 2'b10;
    reg [1:0] state = find_one, next_state;
    always @* begin
        case(state)    
            2'b00: next_state= x ? 2'b01:  2'b00 ;
            2'b01: next_state = !x ? 2'b10 : 2'b01;
            2'b10: next_state = x ? 2'b01:  2'b00;
        endcase
    end

    always @(posedge clk or negedge aresetn) begin
        if (!aresetn) 
            state = find_one;
        else
            state <= next_state;
    end
    assign z  = (state == 2'b10) & x;
endmodule
